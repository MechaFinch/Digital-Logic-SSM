

 this is where I'm putting the ISA
 data is little endian
 spaces at the start of lines means they're ignored by programs parsing this
 other characters mark information
 
 . marks an instruction's primary mnemonic
 , marks additional mnemonics for the same opcode
 > is an entry point, and is on the line with the instruction's table
 ~ is a binary control word
 
 arguments take the form <set of modifiers> <type>
 arguments after the mnemonic are comma separated and different forms are separated by OR, e.g. "label OR const word"
 mnemonic only types have an equivalent that is only different in how it's written in the assembly, written as (mnemonic only: <equivalent type>)
 
 modifiers
  - offset marks a label to be the difference between the instruction and label
  - short marks an offset label as being limited to the range +127 -128 (1 byte)
  - unsigned probably does nothing for the assembler but that isn't final
 
 types
  - byte = 1 byte
  - word = 2 bytes, lower then upper
  - label (mnemonic only: word)

 ----------------
 OPCODE
 |----|------|
 | op | args |
 |----|------|
 
 Description
 
 operand stack
 
 Microcode
 0000 0000 0000 0000 0000 0000 0000 0000
 
 ----------------
.NOP
 |----|
>| 00 |
 |----|
 
 Does nothing
 
 No change
 
 next inst
~0000 0000 0000 0011 0000 0000 0000 0011
 
 ----------------
.PUSH byte
 |----|------|
>| 01 | byte |
 |----|------|
 
 Pushes a byte
 
 ... ->
 ..., value
 
 decrement sp, load constant to A
~0000 0000 0000 0001 0010 0000 0100 0011

 store A at sp
~0000 0000 0000 0000 0000 0000 0001 1010

 next inst
~0000 0000 0000 0011 0000 0000 0000 0011
    
 ----------------
.PUSH word OR label
 |----|------|
>| 02 | word |
 |----|------|
 
 Pushes an address
 
 ... ->
 ..., val_h, val_l
 
 decrement sp, load constant to A
~0000 0000 0000 0001 0010 0000 0100 0011
 
 load constant to B
~0000 0000 0000 0001 0000 0000 1000 0011

 store B at sp & decrement sp
~0000 0000 0000 0000 0010 0000 0010 1110

 store A at sp
~0000 0000 0000 0000 0000 0000 0010 1010

 next inst
~0000 0000 0000 0011 0000 0000 0000 0011
 
 ----------------
.POP
 |----|
>| 03 |
 |----|
 
 Pops 1 byte
 
 ..., value ->
 ...
 
 increment sp & next inst
~0000 0000 0000 0011 0011 0000 0000 0011
 
 ----------------
.POP2
 |----|
>| 04 |
 |----|
 
 Pops 2 bytes
 
 ..., value1, value2 ->
 ...
 
 increment sp
~0000 0000 0000 0000 0011 0000 0000 0000
 
 increment sp & next inst
~0000 0000 0000 0011 0011 0000 0000 0011
 
 ----------------
.POP unsigned byte
 |----|------|
>| 05 | byte |
 |----|------|
 
 Pops n bytes
 Affects carry flag
 
 ..., <n bytes> ->
 ...
 
 load A with spl
~0000 0000 0000 0000 0000 0000 0101 0010
 
 load B with constant
~0000 0000 0000 0001 0000 0000 1000 0011
 
 addsc, store B
~0000 0110 1010 0100 0000 0000 1000 0100
 
 load A with sph
~0000 0000 0000 0000 0000 0000 0101 0110
 
 add carry to A
~0000 0000 0000 0000 0000 0000 0100 0100
 
 store AB to sp
~0000 0000 0000 0000 0010 1000 0000 0000
 
 next inst
~0000 0000 0000 0011 0000 0000 0000 0011
 
 ----------------
 
.DUP
 |----|
>| 06 |
 |----|
 
 Duplicates the value
 
 ..., value ->
 ..., value, value
 
 load sp to A, decrement sp
~0000 0000 0000 0000 0010 0000 0100 0010
 
 store A at sp
~0000 0000 0000 0000 0000 0000 0010 1010

 next inst
~0000 0000 0000 0011 0000 0000 0000 0011
 
 ----------------
.DUPO1
 |----|
>| 07 |
 |----|
 
 Duplicates the value over 1 byte
 
 ..., value, byte ->
 ..., value, byte, value
 
 ----------------
.DUPO2
 |----|
>| 08 |
 |----|
 
 Duplicates the value over 2 bytes
 
 ..., value, byte1, byte2 ->
 ..., value, byte1, byte2, value
 
 ----------------
.DUPON unsigned byte
 |----|------|
>| 09 | byte |
 |----|------|
 
 Duplicates the value over n bytes
 
 ..., value, <n bytes> ->
 ..., value, <n bytes>, value
 
 ----------------
.DUP2
 |----|
>| 0A |
 |----|
 
 Duplicates the 2-byte value
 
 ..., value_h, value_l ->
 ..., value_h, value_l, value_h, value_l
 
 load sp to A, increment sp
~0000 0000 0000 0000 0011 0000 0100 0010

 load sp to B, decrement sp
~0000 0000 0000 0000 0010 0000 1000 0010
 
 decrement sp
~0000 0000 0000 0000 0010 0000 0000 0000

 store B at sp, decrement sp
~0000 0000 0000 0000 0010 0000 0010 1110
 
 store A at sp
~0000 0000 0000 0000 0000 0000 0010 1010

 next inst
~0000 0000 0000 0011 0000 0000 0000 0011
 
 ----------------
.DUP2O1
 |----|
>| 0B |
 |----|
 
 Duplicates the 2-byte value over 1 byte
 
 ..., value_h, value_l, byte ->
 ..., value_h, value_l, byte, value_h, value_low
 
 ----------------
.DUP2O2
 |----|
>| 0C |
 |----|
 
 Duplicates the 2-byte value over 2 bytes
 Sets the base pointer to the address of the original value_l, use DUP2O2PB to avoid this
 
 ..., value_h, value_l, byte1, byte2 ->
 ..., value_h, value_l, byte1, byte2, value_h, value_l
 
 ----------------
.DUP2O2PB
 |----|
>| 0D |
 |----|
 
 Duplicates the 2-byte value over 2 bytes, preserving the base pointer
 
 ..., value_h, value_l, byte1, byte2 ->
 ..., value_h, value_l, byte1, byte2, value_h, value_l
 
 ----------------
.DUP2ON unsigned byte
 |----|------|
>| 0E | byte |
 |----|------|
 
 Duplicates the 2-byte value over n bytes
 Sets the base pointer to the address of the original value_l, use DUP2ONPB to avoid this
 
 ..., value_h, value_l, <n bytes> ->
 ..., value_h, value_l, <n bytes>, value_l
 
 ----------------
.DUP2ONPB unsigned byte
 |----|------|
>| 0F | byte |
 |----|------|
 
 Duplicates the 2-byte value over n bytes, preserving the base pointer
 
 ..., value_h, value_l, <n bytes> ->
 ..., value_h, value_l, <n bytes>, value_h, value_l
 
 ----------------
.SWAP
 |----|
>| 10 |
 |----|
 
 Swaps the top 2 bytes
 
 ..., value1, value2 ->
 ..., value2, value1
 
 load sp to A, increment sp
~0000 0000 0000 0000 0011 0000 0100 0010
 
 load sp to B
~0000 0000 0000 0000 0000 0000 1000 0010
 
 store A at sp, decrement sp
~0000 0000 0000 0000 0010 0000 0010 1010
 
 store B at sp
~0000 0000 0000 0000 0000 0000 0010 1110
 
 next inst
~0000 0000 0000 0011 0000 0000 0000 0011
 
 ----------------
.SWAP2
 |----|
>| 11 |
 |----|
 
 Swaps the top 2 words
 
 ..., value1_h, value1_l, value2_h, value2_l ->
 ..., value2_h, value2_l, value1_h, value1_l
 
 load sp to A, increment sp
~0000 0000 0000 0000 0011 0000 0100 0010
 
 increment sp
~0000 0000 0000 0000 0011 0000 0000 0000
 
 load sp to B
~0000 0000 0000 0000 0000 0000 1000 0010
 
 store A at sp, decrement sp
~0000 0000 0000 0000 0010 0000 0010 1010
 
 load sp to A, decrement sp
~0000 0000 0000 0000 0010 0000 0100 0010
 
 store B at sp, increment sp
~0000 0000 0000 0000 0011 0000 0010 1110
 
 increment sp
~0000 0000 0000 0000 0011 0000 0000 0000
 
 increment sp
~0000 0000 0000 0000 0011 0000 0000 0000
 
 load sp to B
~0000 0000 0000 0000 0000 0000 1000 0010
 
 store A at sp, decrement sp
~0000 0000 0000 0000 0010 0000 0010 1010
 
 decrement sp
~0000 0000 0000 0000 0010 0000 0000 0000
 
 store B at sp, decrement sp
~0000 0000 0000 0000 0010 0000 0010 1110
 
 next inst
~0000 0000 0000 0011 0000 0000 0000 0011
 
 ----------------
.LOAD word OR label
 |----|------|
>| 20 | word |
 |----|------|
 
 Pushes the value at the specified memory address
 
 ... ->
 ..., value
 
 load constant to B
~0000 0000 0000 0001 0000 0000 1000 0011
 
 load constant to A
~0000 0000 0000 0001 0000 0000 0100 0011
 
 load value at AB to A, decrement sp
~0000 0000 0000 0000 0010 0000 0100 0000
 
 store A at sp
~0000 0000 0000 0000 0000 0000 0010 1010
 
 next inst
~0000 0000 0000 0011 0000 0000 0000 0011

 ----------------
.PLOAD
 |----|
>| 21 |
 |----|
 
 Pushes the value at [pointer]
 
 ..., pointer_h, pointer_l ->
 ..., value
 
 load sp to B, increment sp
~0000 0000 0000 0000 0011 0000 1000 0010
 
 load sp to A
~0000 0000 0000 0000 0000 0000 0100 0010
 
 load AB to A
~0000 0000 0000 0000 0000 0000 0100 0000
 
 store A to sp
~0000 0000 0000 0000 0000 0000 0010 1010
 
 next inst
~0000 0000 0000 0011 0000 0000 0000 0011
 
 ----------------
.ALOAD
 |----|
>| 22 |
 |----|
 
 Pushes the value at [pointer + offset]
 
 ..., pointer_h, pointer_l, offset ->
 ..., value
 
 load sp to A, increment sp
~0000 0000 0000 0000 0011 0000 0100 0010
 
 load sp to B, save inverse carry of 2A
~0000 0111 1011 0000 0000 0000 1000 0010
 
 store sign extension to sp, decrement sp
~0000 0000 0000 1100 0010 0000 0010 0110

 addsc, store to sp, increment sp
~0000 0110 1010 0100 0011 0000 0010 0110
 
 load sp to B, increment sp
~0000 0000 0000 0000 0011 0000 1000 0010
 
 load sp to A, decrement sp
~0000 0000 0000 0000 0010 0000 0100 0010
 
 addwc, store to A, decrement sp
~0000 0000 0010 0100 0010 0000 0100 0100
 
 load sp to B, increment sp
~0000 0000 0000 0000 0011 0000 1000 0010
 
 load AB to A, increment sp
~0000 0000 0000 0000 0011 0000 0100 0000
 
 store A to sp
~0000 0000 0000 0000 0000 0000 0010 1010
 
 next inst
~0000 0000 0000 0011 0000 0000 0000 0011
 
 ----------------
.ALOAD word OR label
 |----|------|
>| 23 | word |
 |----|------|
 
 Pushes the value at [pointer + offset]
 
 ..., offset ->
 ..., value
 
 load sp to A, decrement sp
~0000 0000 0000 0000 0010 0000 0100 0010
 
 load ip to B, save inverse carry of 2A
~0000 0111 1011 0001 0000 0000 1000 0011
 
 store sign extension to sp, increment sp
~0000 0000 0000 1100 0011 0000 0010 0110
 
 addsc, store to sp, decrement sp
~0000 0110 1010 0100 0010 0000 0010 0110
 
 load sp to B, increment sp
~0000 0000 0000 0000 0011 0000 1000 0010
 
 load ip to A
~0000 0000 0000 0001 0000 0000 0100 0011
 
 addwc, store to A
~0000 0000 0010 0100 0000 0000 0100 0100
 
 load sp to B
~0000 0000 0000 0000 0000 0000 1000 0010
 
 load AB to A
~0000 0000 0000 0000 0000 0000 0100 0000
 
 store A to sp
~0000 0000 0000 0000 0000 0000 0010 1010
 
 next inst
~0000 0000 0000 0011 0000 0000 0000 0011

 ----------------
.WALOAD
 |----|------|
>| 24 | word |
 |----|------|
 
 Pushes the value at [pointer + offset]
 
 ..., offset_h, offset_l ->
 ..., value
 
 ----------------
.WALOAD word OR label
 |----|------|
>| 25 | word |
 |----|------|
 
 Pushes the value at [pointer + offset]
 
 ..., offset_h, offset_l ->
 ..., value
 
 ----------------
.BPLOAD
 |----|
>| 26 |
 |----|
 
 Pushes the value at [base pointer]
 
 ... ->
 ..., value
 
 ----------------
.BPALOAD
 |----|
>| 27 |
 |----|
 
 Pushes the value at [base pointer + offset]
 
 ..., offset ->
 ..., value
 
 ----------------
.BPWALOAD
 |----|
>| 28 |
 |----|
 
 Pushes the value at [base pointer + offset]
 
 ..., offset_h, offset_l ->
 ..., value
 
 ----------------
.STORE word OR label
 |----|------|
>| 29 | word |
 |----|------|
 
 Stores the value to the specified memory address
 Sets the base pointer to the specified memory address, use STOREPB to avoid this
 
 ..., value ->
 ...
 
 load constant to B
~0000 0000 0000 0001 0000 0000 1000 0011
 
 load constant to A
~0000 0000 0000 0001 0000 0000 0100 0011

 put AB in bp
~0000 0000 0000 0000 0000 0101 0000 0000
 
 load sp to A
~0000 0000 0000 0000 0000 0000 0100 0010
 
 store A at bp, increment sp
~0000 0000 0000 0000 0011 0000 0010 1001
 
 next inst
~0000 0000 0000 0011 0000 0000 0000 0011

 ----------------
.STOREPB word OR label
 |----|------|
>| 2A | word |
 |----|------|
 
 Stores the value to the specified memory address while preserving the base pointer
 
 ..., value ->
 ...
 
 put bph in A, decrement sp
~0000 0000 0000 0000 0010 0000 0101 0101
 
 store A at sp
~0000 0000 0000 0000 0000 0000 0010 1010
 
 put bpl in A, decrement sp
~0000 0000 0000 0000 0010 0000 0101 0001
 
 store A at sp
~0000 0000 0000 0000 0000 0000 0010 1010
 
 load constant to B, increment sp
~0000 0000 0000 0001 0011 0000 1000 0011
 
 load constant to A, increment sp
~0000 0000 0000 0001 0011 0000 0100 0011
 
 put AB in bp
~0000 0000 0000 0000 0000 0101 0000 0000
 
 load sp to A, decrement sp
~0000 0000 0000 0000 0010 0000 0100 0010
 
 store A at bp, decrement sp
~0000 0000 0000 0000 0010 0000 0010 1001
 
 load sp to B, increment sp
~0000 0000 0000 0000 0011 0000 1000 0010
 
 load sp to A, increment sp
~0000 0000 0000 0000 0011 0000 0100 0010
 
 put AB in bp, increment sp
~0000 0000 0000 0000 0011 0101 0000 0000
 
 next inst
~0000 0000 0000 0011 0000 0000 0000 0011
 
 ----------------
.PSTORE
 |----|
>| 2B |
 |----|
 
 Stores the value to [pointer]
 Sets the base pointer to the pointer, use PSTOREPB to avoid this
 
 ..., pointer_h, pointer_l, value ->
 ...
 
 ----------------
.PSTOREPB
 |----|
>| 2C |
 |----|
 
 Stores the value to [pointer] while preserving the base pointer
 
 ..., pointer_h, pointer_l, value ->
 ...
 
 ----------------
.ASTORE
 |----|
>| 2D |
 |----|
 
 Stores the value to [pointer + offset]
 Sets the base pointer to the effective address, use ASTOREPB to avoid this
 
 ..., pointer_h, pointer_l, offset, value ->
 ...
 
 ----------------
.ASTOREPB
 |----|
>| 2E |
 |----|
 
 Stores the value to [pointer + offset] while preserving the base pointer
 
 ..., pointer_h, pointer_l, offset, value ->
 ...
 
 ----------------
.ASTORE word OR label
 |----|------|
>| 2F | word |
 |----|------|
 
 Stores the value to [pointer + offset]
 Sets the base pointer to the effective address, use ASTOREPB to avoid this
 
 ..., offset, value ->
 ...
 
 ----------------
.ASTOREPB word OR label
 |----|------|
>| 30 | word |
 |----|------|
 
 Stores the value to [pointer + offset] while preserving the base pointer
 
 ..., offset, value ->
 ...
 
 ----------------
.WASTORE
 |----|
>| 31 |
 |----|
 
 Stores the value to [pointer + offset]
 Sets the base pointer to the effective address, use WASTOREPB to avoid this
 
 ..., pointer_h, pointer_l, offset_h, offset_l, value ->
 ...
 
 ----------------
.WASTOREPB
 |----|
>| 32 |
 |----|
 
 Stores the value to [pointer + offset] while preserving the base pointer
 
 ..., pointer_h, pointer_l, offset_h, offset_l, value ->
 ...
 
 ----------------
.WASTORE word OR label
 |----|------|
>| 33 | word |
 |----|------|
 
 Stores the value to [pointer + offset]
 Sets the base pointer to the effective address, use WASTOREPB to avoid this
 
 ..., offset_h, offset_l, value ->
 ...
 
 ----------------
.WASTOREPB word OR label
 |----|------|
>| 34 | word |
 |----|------|
 
 Stores the value to [pointer + offset] while preserving the base pointer
 
 ..., offset_h, offset_l, value ->
 ...
 
 ----------------
.BPSTORE
 |----|
>| 35 |
 |----|
 
 Stores the value to [base pointer]
 
 ..., value ->
 ...
 
 ----------------
.BPASTORE
 |----|
>| 36 |
 |----|
 
 Stores the value to [base pointer + offset]
 Sets the base pointer to the effective address, use BPASTOREPB to avoid this
 
 ..., offset, value ->
 ...
 
 ----------------
.BPASTOREPB
 |----|
>| 37 |
 |----|
 
 Stores the value to [base pointer + offset] while preserving the base pointer
 
 ..., offset, value ->
 ...
 
 ----------------
.BPASTORE byte
 |----|------|
>| 38 | byte |
 |----|------|
 
 Stores the value to [base pointer + offset]
 Sets the base pointer to the effective address, use BPASTOREPB to avoid this
 
 ..., value ->
 ...
 
 ----------------
.BPASTOREPB byte
 |----|------|
>| 39 | byte |
 |----|------|
 
 Stores the value to [base pointer + offset] while preserving the base pointer
 
 ..., value ->
 ...
 
 ----------------
.BPWASTORE
 |----|
>| 3A |
 |----|
 
 Stores the value to [base pointer + offset]
 Sets the base pointer to the effective address, use PBWASTOREPB to avoid this
 
 ..., offset_h, offset_l, value ->
 ...
 
 ----------------
.BPWASTOREPB
 |----|
>| 3B |
 |----|
 
 Stores the value to [base pointer + offset] while preserving the base pointer
 
 ..., offset_h, offset_l, value ->
 ...
 
 ----------------
.BPWASTORE word
 |----|
>| 3C |
 |----|
 
 Stores the value to [base pointer + offset]
 Sets the base pointer to the effective address, use BPWASTOREPB to avoid this
 
 ..., value ->
 ...
 
 ----------------
.BPWASTOREPB word
 |----|
>| 3D |
 |----|
 
 Stores the value to [base pointer + offset] while preserving the base pointer
 Ah long mnemonics: Base Pointer Word-Index Array Store, Preserve Base
 
 ..., value ->
 ...
 
 ----------------
.PUSHBP
 
 ----------------
.POPBP
 
 ----------------
.SETBP
 
 ----------------
.PUSHS
 
 ----------------
.POPS
 
 ---------------- <- put these with standard inc/dec when we get to those
.INCBP
 
 ----------------
.DECBP
 
 ----------------
.CEZ
 
 ----------------
.CNZ
 
 ----------------
.CGZ
 
 ----------------
.CGEZ
 
 ----------------
.CLZ
 
 ----------------
.CLEZ

 ----------------
.CE
 
 ----------------
.CNE
 
 ----------------
.CG
 
 ----------------
.CGE
 
 ----------------
.CL
 
 ----------------
.CLE
 
 ----------------
.CEI byte
 
 ----------------
.CNEI byte
 
 ----------------
.CGI byte
 
 ----------------
.CGEI byte
 
 ----------------
.CLI byte
 
 ----------------
.CLEI byte
 
 ----------------
.JMPS
 |----|
>| 80 |
 |----|
 
 Jumps by the 1-byte displacement relative to the next instruction
 
 ..., disp ->
 ...
 
 load sp to A
~0000 0000 0000 0000 0000 0000 0100 0010
 
 put ipl in B, save inverse carry of 2A
~0000 0111 1011 0000 0000 0000 1001 0011
 
 store sign extension to sp, decrement sp
~0000 0000 0000 1100 0010 0000 0010 0110
 
 addsc, store to sp, increment sp
~0000 0110 1010 0100 0011 0000 0010 0110
 
 load sp to B, decrement sp
~0000 0000 0000 0000 0010 0000 1000 0010
 
 put iph in A
~0000 0000 0000 0000 0000 0000 0101 0111
 
 addwc, store to A
~0000 0000 0010 0100 0000 0000 0100 0100
 
 load sp to B, increment sp
~0000 0000 0000 0000 0011 0000 1000 0010
 
 put AB in ip, increment sp
~0000 0000 0000 0001 1011 0000 0000 0000
 
 next inst
~0000 0000 0000 0011 0000 0000 0000 0011
 
 ----------------
.JMPS byte OR short offset label
 |----|------|
>| 81 | byte |
 |----|------|
 
 Jumps by the 1-byte displacement relative to the next instruction
 
 No change
 
 load constant to A
~0000 0000 0000 0001 0000 0000 0100 0011
 
 put ipl in B, save inverse carry of 2A, decrement sp
~0000 0111 1011 0000 0010 0000 1001 0011
 
 store sign extension to sp, decrement sp
~0000 0000 0000 1100 0010 0000 0010 0110
 
 addsc, store to sp, increment sp
~0000 0110 1010 0100 0011 0000 0010 0110
 
 load sp to B, decrement sp
~0000 0000 0000 0000 0010 0000 1000 0010
 
 put iph in A
~0000 0000 0000 0000 0000 0000 0101 0111
 
 addwc, store to A
~0000 0000 0010 0100 0000 0000 0100 0100
 
 load sp to B, increment sp
~0000 0000 0000 0000 0011 0000 1000 0010
 
 put AB in ip, increment sp
~0000 0000 0000 0001 1011 0000 0000 0000
 
 next inst
~0000 0000 0000 0011 0000 0000 0000 0011
 
 ----------------
.JMPSC
 |----|
>| 82 |
 |----|
 
 Jumps by the 1-byte displacement relative to the next instruction if condition is set
 
 ..., disp ->
 ...
 
 ----------------
.JMPSC byte OR short offset label
 |----|------|
>| 83 | byte |
 |----|------|
 
 Jumps by the 1-byte displacement relative to the next instruction if condition is set
 
 No change
 
 ----------------
.JMPSN
 |----|
>| 84 |
 |----|
 
 Jumps by the 1-byte displacement relative to the next instruction if condition is not set
 
 ..., disp ->
 ...
 
 ----------------
.JMPSN byte OR short offset label
 |----|------|
>| 85 | byte |
 |----|------|
 
 Jumps by the 1-byte displacement relative to the next instruction if condition is not set
 
 No change
 
 ----------------
.JMPL
 |----|
>| 86 |
 |----|
 
 Jumps to the address
 
 ..., addr_h, addr_l ->
 ...
 
 ----------------
.JMPL word OR label
 |----|------|
>| 87 | word |
 |----|------|
 
 Jumps to the address
 
 No change
 
 ----------------
.JMPLC
 |----|
>| 88 |
 |----|
 
 Jumps to the address if condition is set
 
 ..., addr_h, addr_l ->
 ...
 
 ----------------
.JMPLC word OR label
 |----|------|
>| 89 | word |
 |----|------|
 
 Jumps to the address if condition is set
 
 No change
 
 ----------------
.JMPLN
 |----|
>| 8A |
 |----|
 
 Jumps to the address if condition is not set
 
 ..., addr_h, addr_l ->
 ...
 
 ----------------
.JMPLN word OR label
 |----|------|
>| 8B | word |
 |----|------|
 
 Jumps to the address if condition is not set
 
 No change
 
 ----------------
.CALL
 |----|
>| 8C |
 |----|
 
 Pushes IP then jumps to the address
 
 ..., addr_h, addr_l ->
 ..., ip_h, ip_l
 
 ----------------
.CALL word OR label
 |----|------|
>| 8D | word |
 |----|------|
 
 Pushes IP then jumps to the address
 
 ... ->
 ..., ip_h, ip_l
 
 ----------------
.RET
 |----|
>| 8E |
 |----|
 
 Pops IP
 
 ..., ip_h, ip_l ->
 ...
 
 ----------------
.RET unsigned byte
 |----|
>| 8F |
 |----|
 
 Pops IP then pops n bytes
 
 ..., <n bytes>, ip_h, ip_l ->
 ...

 ----------------
.ENTER byte
 |----|------|
>| 90 | byte |
 |----|------|
 
 Pushes BP, sets BP to SP, adds the value to SP
 
 ... ->
 ..., bp_h, bp_l, <value bytes of uninitialized data>
 
 ----------------
.ENTER word
 |----|------|
>| 91 | word |
 |----|------|
 
 Pushes BP, sets BP to SP, adds the value to SP
 
 ... ->
 ..., bp_h, bp_l, <value bytes of uninitialized data>
 
 ----------------
.LEAVE
 |----|
>| 92 |
 |----|
 
 Sets SP to BP, pops BP
 
 ..., bp_h, bp_l, ... ->
 ...
 
 ----------------
.READ
 |----|
>| FE |
 |----|
 
 Reads the value from IO, placing it on the stack
 
 ... ->
 ..., value
 
 decrement sp, load IO to A
~0000 0000 0000 0000 0010 0000 0101 1000

 store A at sp
~0000 0000 0000 0000 0000 0000 0010 1010

 next inst
~0000 0000 0000 0011 0000 0000 0000 0011
 
 ----------------
.WRITE
 |----|
>| FF |
 |----|
 
 Writes the value on the stack to IO
 
 ..., value ->
 ...
 
 write stack to IO
~1000 0000 0000 0000 0000 0000 0000 0010
 
 increment sp & next inst
~0000 0000 0000 0011 0011 0000 0000 0011
    
 ----------------
 
 
 
