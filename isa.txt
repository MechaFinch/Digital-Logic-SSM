

 this is where I'm putting the ISA
 data is little endian
 spaces at the start of lines means they're ignored by programs parsing this
 other characters mark information
 
 . marks an instruction's primary mnemonic
 , marks additional mnemonics for the same opcode
 > is an entry point, and is on the line with the instruction's table
 ~ is a binary control word
 
 arguments take the form <set of modifiers> <type>
 arguments after the mnemonic are comma separated and different forms are separated by OR, e.g. "label OR const word"
 mnemonic only types have an equivalent that is only different in how it's written in the assembly, written as (mnemonic only: <equivalent type>)
 
 modifiers
  - const refers to a constant value
  - offset marks a label to be the difference between the instruction and label
  - unsigned probably does nothing for the assembler but that isn't final
 
 types
  - byte = 1 byte
  - word = 2 bytes, lower then upper
  - label (mnemonic only: word)

 ----------------
 OPCODE
 |----|------|
 | op | args |
 |----|------|
 
 Description
 
 operand stack
 
 Microcode
 0000 0000 0000 0000 0000 0000 0000 0000
 
 ----------------
.NOP
 |----|
>| 00 |
 |----|
 
 Does nothing.
 
 No change.
 
 next inst
~0000 0000 0000 0011 0000 0000 0010 0011
 
 ----------------
.POP
 |----|
>| 01 |
 |----|
 
 Discards the top of the stack
 
 ..., value ->
 ...
 
 increment sp & next inst
~0000 0000 0000 0011 0011 0000 0010 0011
 
 ----------------
.POP const unsigned byte
 |----|------|
>| 02 | byte |
 |----|------|
 
 Pops n bytes off the stack
 Affects carry flag
 
 ..., value1, value2, ... valuen ->
 ...
 
 load a with sp low
~0000 0000 0000 0000 0000 0001 0010 1010
 
 load b with constant
~0000 0000 0000 0001 0000 0010 0010 0011
 
 add, store b
~0000 0110 1010 0100 0000 0010 0010 0100
 
 load a with sp high
~0000 0000 0000 0000 0000 0001 0110 1010
 
 add carry to a
~0000 0000 0000 0000 0000 0001 0010 0100
 
 store ab to sp
~0000 0000 0000 0000 0010 1000 0010 0000
 
 next inst
~0000 0000 0000 0011 0000 0000 0010 0011
 
 ----------------
.POP2
 |----|
>| 03 |
 |----|
 
 Pops 2 bytes off the stack
 
 ..., value1, value2 ->
 ...
 
 increment sp
~0000 0000 0000 0000 0011 0000 0000 0000
 
 increment sp & next inst
~0000 0000 0000 0011 0011 0000 0010 0011

 ----------------
.PUSH const byte
 |----|------|
>| 04 | byte |
 |----|------|
 
 Pushes a constant onto the stack
 
 ... ->
 ..., value
 
 decrement sp, load constant to A
~0000 0000 0000 0001 0010 0001 0010 0011

 store A at sp
~0000 0000 0000 0000 0000 0000 1011 0010

 next inst
~0000 0000 0000 0011 0000 0000 0010 0011
    
 ----------------
.PUSH const word OR label
 |----|------|
>| 05 | word |
 |----|------|
 
 Pushes an address onto the stack
 the desired little-endian pop means we gotta reverse them, cool cool
 we could just say constant args are big endian but thats inconsistent
 
 ... ->
 ... val_h, val_l
 
 decrement sp, load constant to A
~0000 0000 0000 0001 0010 0001 0010 0011
 
 load constant to B
~0000 0000 0000 0001 0000 0010 0010 0011

 store B at sp & decrement it
~0000 0000 0000 0000 0010 0000 1011 0110

 store A at sp
~0000 0000 0000 0000 0000 0000 1011 0010

 next inst
~0000 0000 0000 0011 0000 0000 0010 0011
 
 ----------------
.LOAD const word OR label
 |----|------|
>| 08 | word |
 |----|------|
 
 Pushes the value at the specified memory address onto the stack
 
 ... ->
 ..., value
 
 load constant to B
~0000 0000 0000 0001 0000 0010 0010 0011
 
 load constant to A
~0000 0000 0000 0001 0000 0001 0010 0011
 
 load value at AB to A, decrement sp
~0000 0000 0000 0000 0010 0001 0010 0000
 
 store A at sp
~0000 0000 0000 0000 0000 0000 1011 0010
 
 next inst
~0000 0000 0000 0011 0000 0000 0010 0011
 
 ----------------
.ALOAD
 |----|
>| 09 |
 |----|
 
 Pushes the value at [pointer + offset] onto the stack
 
 ..., pointer_h, pointer_l, offset ->
 ..., value
 
 ----------------
.ALOAD const word OR label
 |----|------|
>| 0A | word |
 |----|------|
 
 Pushes the value at [pointer + offset] onto the stack
 
 ..., offset ->
 ..., value
 
 ----------------
.PLOAD
 |----|
>| 0A |
 |----|
 
 Pushes the value at [pointer] onto the stack
 
 ..., pointer_h, pointer_l ->
 ..., value
 
 ----------------
.STORE const word OR label
 |----|------|
>| 10 | word |
 |----|------|
 
 Stores the top of the stack to the specified memory address
 This instruction sets the base pointer to the specified memory address, use STOREPB to avoid this.
 
 ..., value ->
 ...
 
 load constant to B
~0000 0000 0000 0001 0000 0010 0010 0011
 
 load constant to A
~0000 0000 0000 0001 0000 0001 0010 0011

 put AB in bp
~0000 0000 0000 0000 0000 0100 0000 0000
 
 load sp to A
~0000 0000 0000 0000 0000 0001 0010 0010
 
 store A at bp, increment sp
~0000 0000 0000 0000 0011 0000 1011 0001
 
 next inst
~0000 0000 0000 0011 0000 0000 0010 0011

 ----------------
.STOREPB const word OR label
 |----|------|
>| 11 | word |
 |----|------|
 
 Stores the top of the stack to the specified memory address while preserving the base pointer
 
 ..., value ->
 ...
 
 put bph in A, decrement sp
~0000 0000 0000 0000 0010 0001 0110 1001
 
 store A at sp
~0000 0000 0000 0000 0000 0000 1011 0010
 
 put bpl in A, decrement sp
~0000 0000 0000 0000 0010 0001 0010 1001
 
 store A at sp
~0000 0000 0000 0000 0000 0000 1011 0010
 
 load constant to B, increment sp
~0000 0000 0000 0001 0011 0010 0010 0011
 
 load constant to A, increment sp
~0000 0000 0000 0001 0011 0001 0010 0011
 
 put AB in bp
~0000 0000 0000 0000 0000 0100 0000 0000
 
 load sp to A, decrement sp
~0000 0000 0000 0000 0010 0001 0010 0010
 
 store A at bp, decrement sp
~0000 0000 0000 0000 0010 0000 1011 0001
 
 load sp to B, increment sp
~0000 0000 0000 0000 0011 0010 0010 0010
 
 load sp to A, increment sp
~0000 0000 0000 0000 0011 0001 0010 0010
 
 put AB in bp, increment sp
~0000 0000 0000 0000 0011 0100 0000 0000
 
 next inst
~0000 0000 0000 0011 0000 0000 0010 0011
 
 ----------------
.ASTORE
 |
>| 12
 |
 
 ----------------
.ASTOREPB
 |
>| 13
 |
 
 ----------------
.ASTORE const word OR label
 |
>| 14
 |
 
 ----------------
.ASTOREPB const word OR label
 |
>| 15
 |
 
 ----------------
.PSTORE
 |
>| 16
 |
 
 ----------------
.PSTOREPB
 |
>| 17
 |
 
 ----------------
.READ
 |----|
>| FE |
 |----|
 
 Reads the value from IO, placing it on the stack
 
 ... ->
 ..., value
 
 decrement sp, load IO to A
~0000 0000 0000 0000 0010 0001 0010 1100

 store A at sp
~0000 0000 0000 0000 0000 0000 1011 0010

 next inst
~0000 0000 0000 0011 0000 0000 0010 0011
 
 ----------------
.WRITE
 |----|
>| FF |
 |----|
 
 Writes the value on the stack to IO
 
 ..., value ->
 ...
 
 write stack to IO
~1000 0000 0000 0000 0000 0000 0010 0010
 
 increment sp & next inst
~0000 0000 0000 0011 0011 0000 0010 0011
    
 ----------------
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 